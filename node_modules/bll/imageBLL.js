/**
 * Created with IntelliJ IDEA.
 * User: zmzsmnh
 * Date: 12-12-21
 * Time: 下午3:44
 * To change this template use File | Settings | File Templates.
 */

var events = require('events'),
    imageDAL = require('dal').Image,
    tagDAL = require('dal').Tag,
    upyunws = require('util/upyunWS'),
    fs = require('fs'),
    errorDef = require('./../../conf/errorCode.def.json');

var imageEvent = new events.EventEmitter();
var numberPerPage = 20;

imageEvent.on('upyun', function (image, content, tryTimes) {
    if(tryTimes > 10) {
        SLOG.error("Upload to upyun failed: ", image.orgin);
        imageEvent.emit('save', image);
        return;
    }
    SLOG.trace("Upload image to upyun: ", image.orgin);
    upyunws.upload(image.orgin, content, function (err, res, upyunUrl) {
        if (err) {
            SLOG.error("Upload to upyun error: ", err);
        } else if (res.statusCode == 403) {
            imageEvent.emit('upyun', image, content, tryTimes+1);
            return;
        } else {
            image.url = upyunUrl;
            image.isPending = false;
            SLOG.trace("Uploaded: ", upyunUrl);
        }
        imageEvent.emit('save', image);
    });
});

imageEvent.on('save', function(image) {
     imageDAL.insert(image, function(err, records) {
        if(err) {
            SLOG.error(err);
        } else {
            if(records[0] && records[0].tags) {
                var tags = records[0].tags.split(/,|，/);
                for(var i in tags) {
                    if(tags[i]) {
                        tagDAL.insert({imageID: records[0]._id, tag: tags[i]}, function(err, docs) {});
                    }
                }
            }
            SLOG.trace("Save image to db successfully.");
        }
     });
});

var constructImage = function (req) {
    var image = {};
    image.uid = req.session.user._id;
    image.uname = req.session.user.name;
    image.orgin = req.body.uri;
    image.from = req.body.from ? req.body.from : '';
    image.tags = req.body.tags ? req.body.tags : '';
    image.description = req.body.description ? req.body.description : '';
    image.isPending = true;
    image.createTime = new Date();
    return image;
}

exports.collect = function (req, res) {
    if(req.body.uri) {
        var image = constructImage(req);
        imageEvent.emit('upyun', image, null, 1);
        res.send();
    } else {
        res.send(errorDef[400006], 400);
    }
}

exports.upload = function(req, res) {
    if(req.files.image_upload && req.files.image_upload.name) {
        var image = constructImage(req);
        image.orgin = req.files.image_upload.name;
        //var data = fs.readFileSync(req.files.image_upload.path);
        fs.readFile(req.files.image_upload.path, 'binary', function(err, data) {
            if(err || !data) {
                SLOG.error("Upload image error - cannot find image file:", err);
                res.send(errorDef[400007], 400);
            } else {
                imageEvent.emit('upyun', image, data, 1);
                res.send();
            }
            fs.unlink(req.files.image_upload.path, function(err) {
                if(err) {
                    SLOG.error("Delete image error - cannot find image file:", err);
                }
            });
        });
    } else {
        res.send(errorDef[400006], 400);
    }
}

exports.getImages = function(req, res, callback) {
    var preId = req.query.pre;
    var nextId = req.query.next;
    if(preId) {
        if(preId.length != 24) {
            res.send(errorDef[400003], 500);
            return;
        }
        imageDAL.findNextPageImagesSortByCreateTime(preId, numberPerPage, function(err, images) {
            if(err) {
                SLOG.error("Get images error: ", err);
                res.send(errorDef[400002], 500);
            } else {
                callback(images);
            }
        });
    } else if(nextId) {
        if(nextId.length != 24) {
            res.send(errorDef[400005], 500);
            return;
        }
        imageDAL.findPrePageImagesSortByCreateTime(nextId, numberPerPage, function(err, images) {
            if(err) {
                SLOG.error("Get images error: ", err);
                res.send(errorDef[400002], 500);
            } else {
                callback(images);
            }
        });
    } else {
        imageDAL.findFirstPageImagesSortByCreateTime(numberPerPage, function(err, images) {
            if(err) {
                SLOG.error("Get images error: ", err);
                res.send(errorDef[400002], 500);
            } else {
                callback(images);
            }
        });
    }
}

exports.getImageById = function(id, res, callback) {
    if(id.length != 24) {
        res.send(errorDef[400008], 500);
        return;
    }
    imageDAL.findById(id, function(err, image) {
        if(err || !image) {
            SLOG.error("Get image err: ", err);
            res.send(errorDef[400002], 500);
        } else {
            callback(image);
        }
    });
}

exports.getImage = function(condition, res, callback) {
    imageDAL.findOne(condition, function(err, image) {
        if(err || !image) {
            SLOG.error("Get image err: ", err);
            res.send(errorDef[400002], 500);
        } else {
            callback(image);
        }
    })
}